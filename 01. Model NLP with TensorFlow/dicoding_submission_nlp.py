# -*- coding: utf-8 -*-
"""dicoding_submission_nlp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nFBexJNh776UrtX6d_6XkgsclFSAPme-

# **NLP for Multiclass Movie Genre Classification**
by : Bayu Alansyah

## **Download Dataset** 
Dataset from Kaggle : [movie genre data](https://www.kaggle.com/lokkagle/movie-genre-data)
"""

# install kaggle package
!pip install -q kaggle

# upload kaggle.json
from google.colab import files
files.upload()

# make directory and change permission
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle/json
!ls ~/.kaggle

# test kaggle dataset list
!kaggle datasets list

# download dataset, choose 'copy api command' from kaggle dataset
!kaggle datasets download -d lokkagle/movie-genre-data

# unzip
!mkdir movie-genre-data
!unzip movie-genre-data.zip -d movie-genre-data
!ls movie-genre-data

"""## Load Dataset"""

# import library
import pandas as pd
import re
from sklearn.model_selection import train_test_split

# load dataset
df = pd.read_csv('movie-genre-data/kaggle_movie_train.csv')
df.head(10)

# data columns
df.columns

# total data
df.shape

# data info
df.info()

# check total value of each genre
df.genre.value_counts()

"""## Preprocessing Data

Only 4 genres are used on this occasion : `comedy`,`action`,`sci-fi`,`horror`.
"""

# Deleting genres other than those 4 genres
df = df[~df['genre'].isin(['drama','thriller','other','adventure','romance'
])]
df.genre.value_counts()

"""Deleting special characters in columns Text"""

# Deleting special characters in columns Text
df['Text'] = df['text'].map(lambda x: re.sub(r'\W+', ' ', x))

# Drop columns Id and old Text 
df = df.drop(['id', 'text'], axis=1)
df.head()

"""Check NA """

# If it is true then there is and if it is false then there is no NA value
df.isnull().values.any()

"""Genre labeling"""

genre = pd.get_dummies(df.genre)
df_genre = pd.concat([df, genre], axis=1)
df_genre = df_genre.drop(columns='genre')
df_genre.head()

"""Changes data type"""

# Change the data type to str and numpy array
text = df_genre['Text'].astype(str)
label = df_genre[['action','comedy','horror','sci-fi']].values

"""Split dataset 20% test/validation"""

from sklearn.model_selection import train_test_split
genre_train, genre_test, label_train, label_test = train_test_split(text, label, test_size=0.2)

"""
Use of tokenizer"""

# Convert to sequence
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(genre_train)
tokenizer.fit_on_texts(genre_test)

sekuens_train = tokenizer.texts_to_sequences(genre_train)
sekuens_test = tokenizer.texts_to_sequences(genre_test)

padded_train = pad_sequences(sekuens_train)
padded_test = pad_sequences(sekuens_test)

"""## **Model and Plot**

Sequential Modeling with Embedding and LSTM
"""

# Modeling
import tensorflow as tf

model = tf.keras.Sequential([
        tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
        tf.keras.layers.LSTM(64),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(4, activation='softmax') 
])

"""Compile model with Adam optimizer"""

from tensorflow.keras.optimizers import Adam
Adam(learning_rate=0.00146, name='Adam')

model.compile(optimizer='Adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""Use Callback for accuracy and validation above 90%"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy')>0.9):
      print("\nTrain and validation accuracy obtained has reached a value of > 90%!")
      self.model.stop_training = True
callbacks = myCallback()

"""Training Model"""

num_epochs = 30
history = model.fit(padded_train, label_train, epochs=num_epochs,
                    validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

"""Making plot accuracy and loss"""

import matplotlib.pyplot as plt
# Plot Accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'], loc='upper left')
plt.show()

# Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train','test'], loc='upper left')
plt.show()